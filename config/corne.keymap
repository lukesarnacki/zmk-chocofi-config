/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/key-labels/42.h"                                                  // Source key-labels.
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // Thumb keys.

/ {
    combos {
        compatible = "zmk,combos";

        jk_apostrophe {
            bindings = <&mt LG(LSHFT) APOS>;
            key-positions = <19 20>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;

        flavor = "balanced";
        tapping-term-ms = <280>;
        quick-tap-ms = <175>;
        require-prior-idle-ms = <150>;

        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <KEYS_R THUMBS>;
        hold-trigger-on-release;
    };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q                &kp W            &kp E            &kp R              &kp T        &kp Y    &kp U               &kp I             &kp O             &kp P                         &none
&none  &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G        &kp H    &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K  &hmr RIGHT_ALT L  &hmr RIGHT_CONTROL SEMICOLON  &none
&none  &kp Z                &kp X            &kp C            &kp V              &kp B        &kp N    &kp M               &kp COMMA         &kp DOT           &kp FSLH                      &none
                                             &kp ESCAPE       &lt 2 BACKSPACE    &lt 3 TAB    &kp RET  &lt 1 SPACE         &kp RALT
            >;
        };

        sym_left {
            bindings = <
&none  &kp GRAVE  &kp AMPS   &kp ASTRK  &kp PERCENT     &trans        &trans  &trans  &trans  &trans  &trans  &none
&none  &kp EQUAL  &kp CARET  &kp MINUS  &kp UNDERSCORE  &kp DOLLAR    &trans  &trans  &trans  &trans  &trans  &none
&none  &kp TILDE  &kp EXCL   &kp AT     &kp HASH        &trans        &trans  &trans  &trans  &trans  &trans  &none
                             &trans     &trans          &trans        &trans  &trans  &trans
            >;
        };

        sym_right {
            bindings = <
&none  &trans  &trans  &trans  &trans  &trans    &kp CARET      &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS           &kp PIPE       &none
&none  &trans  &trans  &trans  &trans  &trans    &trans         &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOUBLE_QUOTES  &kp SQT        &none
&none  &trans  &trans  &trans  &trans  &trans    &kp LESS_THAN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN   &kp BACKSLASH  &none
                       &trans  &trans  &trans    &trans         &trans                &trans
            >;
        };

        nav {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &trans         &trans       &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT_ARROW  &kp DOWN       &kp UP       &kp RIGHT  &kp CAPS  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp INS   &trans
                        &trans  &trans  &trans    &trans          &trans         &trans
            >;
        };

        fun {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
